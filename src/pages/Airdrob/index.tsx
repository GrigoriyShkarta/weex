import { AnimatePresence, motion } from 'framer-motion'
import { useState } from 'react'

interface EventItem {
	title: string
	description: string
	tag?: string
	imageSrc: string
	buttonText?: string
	buttonOnClick?: () => void
}

const Airdrob = () => {
	const [showRules, setShowRules] = useState(false)
	const events: EventItem[] = [
		{
			title: 'Event 1: Deposit to win GHIBLI',
			description:
				'<p>Make your first deposit of 100 USDT to win 117 GHIBLI</p>',
			buttonText: 'Deposit Now',
			imageSrc:
				'https://d2tfhb4luz96yb.cloudfront.net/otc/images/banner/d451d49c955329cafb6feac63dcd3f2c.png',
		},
		{
			title: 'Event 2: Trade to win GHIBLI',
			tag: 'Complete Event 1 to unlock Event 2',
			description:
				'<p>Reach a total trading volume of $100 GHIBLI/USDT to get 234 GHIBLI</p>',
			buttonText: 'Trade Now',
			imageSrc:
				'https://d2tfhb4luz96yb.cloudfront.net/otc/images/banner/1b41bd639ac6744dee1dd20095f059c4.png',
		},
		{
			title: 'Event 3: Trade to win GHIBLI',
			description: `
        <p>Reach a total trading volume of $10,000 to get 234 GHIBLI</p>
        <p>Reach a total trading volume of $100,000 to get 701 GHIBLI</p>
      `,
			buttonText: 'Trade Now',
			imageSrc:
				'https://d2tfhb4luz96yb.cloudfront.net/otc/images/banner/a712e64a94ec7e20fa081127d4e63276.png',
		},
		{
			title: 'Event 4: Finish all tasks to win more',
			tag: 'For tiered task, requirements of all tiers must be',
			description:
				'<p>Complete all the tasks to grab a share of 233,644 GHIBLI</p>',
			imageSrc:
				'https://d2tfhb4luz96yb.cloudfront.net/otc/images/banner/1b41bd639ac6744dee1dd20095f059c4.png',
		},
	]

	const rules = [
		'New users must use the "Register Now" button to register for the event. KYC verification must be completed to participate in this event.',
		"Once the user has successfully registered for the event, the system will calculate the user's deposit and trading volume during the event period.",
		'Net deposit = deposit â€“ withdrawal. Futures trading volume = opening volume + closing volume.',
		'New users refer to those who sign up during the event period. Market makers and institutional users are not eligible to participate and will not be rewarded.',
		'Complete Event 1 to unlock Event 2.',
		'Bonuses will be distributed based on the order of task completion until the bonus pool is exhausted.',
		'During the event, the trading volume generated by each user after registration (except for the trading volume generated by trading pairs with 0 fees and 0% maker fees) will be included in the total trading volume of the event.',
		'Each new WEEX user can only get one new user reward in the WEEX new user event series.',
		'Rewards will be issued within 10 working days after the event ends. Please check your account.',
		'Note that the reward value is based on the current crypto price, and this price may change due to market volatility.',
		'In the event of bulk registrations, malicious volume manipulation, cheating, illegal activities, fraud, or other harmful behavior, WEEX will conduct a strict review and disqualify the participants involved and recover all rewards given.',
		'WEEX reserves the right to change or modify the Terms and Conditions at any time without prior notice.',
		'All participants shall be bound by the revised Terms and Conditions. WEEX reserves the right to amend the Terms and Conditions of the event. WEEX reserves the right of final interpretation for this event.',
	]

	return (
		<div className='promo-container w-[100% bg-black pb-[80px] w-[1200px] mx-auto text-white max-sm:px-[16px] max-sm:w-full'>
			{/* Main Banner */}
			<div
				className='promo-banner min-h-[478px] bg-contain bg-no-repeat relative flex items-center max-sm:h-auto max-sm:pt-[271px] max-sm:mt-[50px]'
				style={{
					backgroundImage:
						'url("https://d2tfhb4luz96yb.cloudfront.net/otc/images/banner/3c78cc0f183abe5116818c70b4f04f53.png")',
				}}
			>
				<div className='banner-content w-1/2 text-white max-sm:w-full max-sm:text-center'>
					<div className='banner-title1 text-[32px] mt-[40px] mb-[16px] max-sm:text-[16px] max-sm:mb-[16px]'>
						New users only
					</div>
					<div className='banner-title2 text-[42px] mb-[16px] font-[700] max-sm:text-[28px] max-sm:mb-[24px]'>
						Share 700,000 GHIBLI in the <br />
						exclusive airdrop
					</div>
					<div className='banner-date text-[#d1d1d2] text-[18px] max-sm:text-[14px]'>
						27.03.2025, 13:00:00 - 30.03.2025, 14:00:00 (UTC+3)
					</div>
					<button className='banner-btn my-[40px] px-[48px] w-auto rounded-[100px] h-[56px] text-[18px] font-[700] bg-white text-black cursor-pointer max-sm:my-[24px] max-sm:w-full max-sm:h-[48px]'>
						Sign Up
					</button>
				</div>

				<img
					src='https://d2tfhb4luz96yb.cloudfront.net/otc/images/banner/2e738ddb655f3310974778c9e8a9e31e.png'
					alt='img'
					className='hidden max-sm:block absolute h-[270px] w-full z-1 top-0 left-0 right-0'
				/>
			</div>

			{/* Events List */}
			{events.map((event, index) => (
				<div
					key={index}
					className='event-wrapper flex flex-col gap-[48px] rounded-[24px] bg-[#151515] p-[40px] mt-[40px] max-sm:mt-[16px] max-sm:py-[24px] max-sm:px-[16px]'
				>
					<div className='event-item flex gap-[40px] items-center'>
						<div className='event-content flex-1 max-sm:w-full'>
							<div className='event-details'>
								<h3
									className='event-title font-[700] text-[32px] max-sm:text-[16px]'
									dangerouslySetInnerHTML={{ __html: event.title }}
								/>
								{event?.tag && (
									<div className='flex flex-wrap gap-[10px] mt-[24px]'>
										<span className='flex items-center justify-center min-h-[24px] h-fit w-fit py-[2.5px] px-[8px] rounded-[12px] border border-[#d8ae15] text-[#d8ae15] text-[14px]'>
											{event.tag}
										</span>
									</div>
								)}
								<div
									className='event-description mt-[24px] text-[16px] whitespace-normal text-[#d1d1d2] max-sm:mt-[12px] max-sm:text-[14px]'
									dangerouslySetInnerHTML={{ __html: event.description }}
								/>
							</div>

							{event.buttonText && (
								<div className='event-button-wrapper mt-[32px] max-sm:mt-[18px] max-sm:w-full'>
									<button className='event-button w-fit w-fit min-h-[40px] h-fit font-[700] rounded-[56px] border border-white bg-transparent text-white px-[16px] cursor-pointer max-sm:max-w-full max-sm:font-[500] max-sm:w-full'>
										{event.buttonText}
									</button>
								</div>
							)}
						</div>
						<img
							src={event.imageSrc}
							alt={`Event ${index + 1}`}
							className='event-image max-sm:hidden w-[200px] h-[200px]'
							loading='lazy'
							width={200}
							height={200}
						/>
					</div>
				</div>
			))}

			<div className='item mt-[80px] border border-[#2e2e2e] rounded-[24px] p-[32px] max-sm:my-[40px]'>
				<button
					onClick={() => setShowRules(!showRules)}
					className='w-full flex justify-between items-center text-left cursor-pointer'
				>
					<h2 className='text-white font-[700] text-[24px] max-sm:text-[16px]'>
						Event Rules
					</h2>
					<motion.div
						animate={{ rotate: showRules ? 180 : 0 }}
						transition={{ duration: 0.3 }}
						className='text-yellow-400 text-lg'
					>
						<svg
							width='16'
							height='16'
							viewBox='0 0 24 24'
							fill='none'
							stroke='currentColor'
							strokeWidth='2'
							strokeLinecap='round'
							strokeLinejoin='round'
						>
							<path d='M6 9l6 6 6-6' />
						</svg>
					</motion.div>
				</button>

				<AnimatePresence>
					{showRules && (
						<motion.div
							initial={{ opacity: 0, height: 0 }}
							animate={{ opacity: 1, height: 'auto' }}
							exit={{ opacity: 0, height: 0 }}
							transition={{ duration: 0.3 }}
							className='mt-[16px] text-[#8b8b8e]'
						>
							{rules.map((rule, index) => (
								<p key={index} className='rule-item'>
									{index + 1}. {rule}
								</p>
							))}
						</motion.div>
					)}
				</AnimatePresence>
			</div>
		</div>
	)
}

export default Airdrob
